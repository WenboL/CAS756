context behappy!People {
  
  // Every NamedElement must define a name
  constraint HasName {
    
    check : self.name <> "" and self.name <> ""

    message : "Element " + self + " must define a name"
    
  }
  //check if people exists in source model
  constraint PeopleExists {
	 	guard: self.satisfies ("HasName")  
	  	check: buyeat!People.allInstances.name.includes(self.name)
	  	
	  	message: self.name + " is not exists in source model, please check."
	  }
	  
	  
  //check if all the people been copied over
  constraint SamePeople {
  	check{
  		var beha = behappy!People.allInstances.name.size();
  		var buyea = buyeat!People.allInstances.name.size();
  		if (beha = buyea){
  		return true;
  		}
  		return false;
  	}  
  	message: "The number of people in target model is not same as source model."
  }

  
} 


/*
//check if the people should be happy or not
	constraint EatEuqalsBuy {
		check{
			if(self.ishappy = true){
				var targetname = self.name;
			}
			for(i in (buyeat!People.allInstances.Buy)){
				for(j in buyeat!People.allInstances.Eats){
					if(i==j){
					return true;
					}
				//(buyeat!People.allInstances.at(i).Eats.name == buyeat!People.allInstances.at(i).Buy.name).print;
				}
			}
			//(buyeat!People.allInstances.at(0).Eats == buyeat!People.allInstances.at(0).Buy).print;
			//buyeat!People.allInstances.at(1).Eats.name.exists(sp|sp=buyeat!People.allInstances.at(1).Buy.name).print;
			//buyeat!People.allInstances.at(0).Eats.name.print;
			//buyeat!People.allInstances.at(0).Buy.print;
			return true;
			
			
		}
		
	message: self.name + " should not be marked as happy."
	}
